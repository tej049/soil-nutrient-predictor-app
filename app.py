import streamlit as st
import joblib
from gtts import gTTS
import os

# Load trained model
model = joblib.load("soil_nutrient_model.joblib")

# Kannada voice response generator
def play_kannada_audio(text, filename="output.mp3"):
    tts = gTTS(text=text, lang='kn')
    tts.save(filename)
    os.system(f"start {filename}" if os.name == "nt" else f"mpg123 {filename}")

# App title
st.title("Soil Nutrient Deficiency Predictor")
st.markdown("Get predictions in **English and Kannada** with optional Kannada voice output.")

# Input fields (with Kannada labels)
temperature = st.number_input("Temperature (‡≤§‡≤æ‡≤™‡≤Æ‡≤æ‡≤®) in ¬∞C", 10.0, 50.0)
humidity = st.number_input("Humidity (‡≤Ü‡≤∞‡≥ç‡≤¶‡≥ç‡≤∞‡≤§‡≥Ü) in %", 10, 100)
ph = st.number_input("Soil pH (‡≤Æ‡≤£‡≥ç‡≤£‡≤ø‡≤® ‡≤™‡≤ø‡≤é‡≤ö‡≥ç)", 3.0, 10.0)
ec = st.number_input("Electrical Conductivity (‡≤µ‡≤ø‡≤¶‡≥ç‡≤Ø‡≥Å‡≤§‡≥ç ‡≤ö‡≤æ‡≤≤‡≤ï‡≤§‡≥Ü)", 0.0, 5.0)
organic_carbon = st.number_input("Organic Carbon (%) (‡≤∏‡≤∏‡≥ç‡≤Ø ‡≤ï‡≤æ‡≤∞‡≥ç‡≤¨‡≤®‡≥ç)", 0.1, 3.0)

soil_type = st.selectbox("Soil Type (‡≤Æ‡≤£‡≥ç‡≤£‡≤ø‡≤® ‡≤™‡≥ç‡≤∞‡≤ï‡≤æ‡≤∞)", ['Loamy', 'Clay', 'Sandy', 'Silty'])
crop_type = st.selectbox("Crop Type (‡≤¨‡≥Ü‡≤≥‡≥Ü ‡≤™‡≥ç‡≤∞‡≤ï‡≤æ‡≤∞)", ['Rice', 'Wheat', 'Maize', 'Sugarcane', 'Millet'])

# Categorical mapping
soil_map = {'Loamy': 0, 'Clay': 1, 'Sandy': 2, 'Silty': 3}
crop_map = {'Rice': 0, 'Wheat': 1, 'Maize': 2, 'Sugarcane': 3, 'Millet': 4}

# Predict button
if st.button("Predict (‡≤Ö‡≤Ç‡≤¶‡≤æ‡≤ú‡≥Å ‡≤Æ‡≤æ‡≤°‡≤ø)"):
    input_data = [[
        temperature, humidity, ph, ec, organic_carbon,
        soil_map[soil_type], crop_map[crop_type]
    ]]
    prediction = model.predict(input_data)[0]

    # Output mapping
    labels = ['Nitrogen', 'Phosphorus', 'Potassium']
    kannada_labels = ['‡≤®‡≥à‡≤ü‡≥ç‡≤∞‡≥ã‡≤ú‡≤®‡≥ç', '‡≤´‡≤æ‡≤∏‡≥ç‡≤™‡≤∞‡≤∏‡≥ç', '‡≤™‡≥ä‡≤ü‡≤æ‡≤∑‡≤ø‡≤Ø‡≤Æ‡≥ç']
    recommendations = {
        'Nitrogen': "Apply Urea or Vermicompost.",
        'Phosphorus': "Apply Single Super Phosphate or Bone meal.",
        'Potassium': "Apply Muriate of Potash or Wood ash."
    }
    kannada_recommendations = {
        'Nitrogen': "‡≤Ø‡≥Å‡≤∞‡≤ø‡≤Ø‡≤æ ‡≤Ö‡≤•‡≤µ‡≤æ ‡≤µ‡≤∞‡≥ç‡≤Æ‡≤ø‡≤ï‡≤Ç‡≤™‡≥ã‡≤∏‡≥ç‡≤ü‡≥ç ‡≤π‡≤æ‡≤ï‡≤ø.",
        'Phosphorus': "‡≤∏‡≤ø‡≤Ç‡≤ó‡≤≤‡≥ç ‡≤∏‡≥Ç‡≤™‡≤∞‡≥ç ‡≤´‡≤æ‡≤∏‡≥ç‡≤´‡≥á‡≤ü‡≥ç ‡≤Ö‡≤•‡≤µ‡≤æ ‡≤Ö‡≤∏‡≥ç‡≤•‡≤ø‡≤Æ‡≤ú‡≥ç‡≤ú‡≥Ü ‡≤π‡≤æ‡≤ï‡≤ø.",
        'Potassium': "‡≤Æ‡≥ç‡≤Ø‡≥Ç‡≤∞‡≤ø‡≤Ø‡≥á‡≤ü‡≥ç ‡≤Ü‡≤´‡≥ç ‡≤™‡≥ä‡≤ü‡≤æ‡≤∂‡≥ç ‡≤Ö‡≤•‡≤µ‡≤æ ‡≤Æ‡≤∞‡≤¶ ‡≤¨‡≥Ç‡≤¶‡≤ø ‡≤π‡≤æ‡≤ï‡≤ø."
    }

    st.subheader("Results (‡≤´‡≤≤‡≤ø‡≤§‡≤æ‡≤Ç‡≤∂):")
    response_text = ""

    for i, val in enumerate(prediction):
        if val == 0:
            st.error(f"Deficient in {labels[i]} ({kannada_labels[i]})")
            st.markdown(f"**Suggestion**: {recommendations[labels[i]]}  \n"
                        f"**‡≤∏‡≤≤‡≤π‡≥Ü**: {kannada_recommendations[labels[i]]}")
            response_text += f"{kannada_labels[i]} ‡≤ï‡≥ä‡≤∞‡≤§‡≥Ü ‡≤á‡≤¶‡≥Ü. {kannada_recommendations[labels[i]]} "
        else:
            st.success(f"Sufficient {labels[i]} ({kannada_labels[i]})")
            response_text += f"{kannada_labels[i]} ‡≤∏‡≤∞‡≤ø‡≤Ø‡≤æ‡≤ó‡≤ø‡≤Ø‡≥á ‡≤á‡≤¶‡≥Ü. "

# Example prediction result (replace this with your actual output)
english_output = "Your soil is Nitrogen deficient. Recommended: Urea fertilizer."
kannada_output = "‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤Æ‡≤£‡≥ç‡≤£‡≥Å‡≤¶‡≤≤‡≥ç‡≤≤‡≤ø ‡≤®‡≥à‡≤ü‡≥ç‡≤∞‡≥ã‡≤ú‡≤®‡≥ç ‡≤ï‡≥ä‡≤∞‡≤§‡≥Ü‡≤Ø‡≤ø‡≤¶‡≥Ü. ‡≤∂‡≤ø‡≤´‡≤æ‡≤∞‡≤∏‡≥Å: ‡≤Ø‡≥Ç‡≤∞‡≤ø‡≤Ø‡≤æ ‡≤ó‡≥ä‡≤¨‡≥ç‡≤¨‡≤∞."

# Display both outputs
st.subheader("ü™¥ Result (‡≤´‡≤≤‡≤ø‡≤§‡≤æ‡≤Ç‡≤∂):")
st.markdown(f"**English**: {english_output}")
st.markdown(f"**Kannada (‡≤ï‡≤®‡≥ç‡≤®‡≤°)**: {kannada_output}")

# Voice Output in Kannada
if st.button("üîä ‡≤ï‡≤®‡≥ç‡≤®‡≤°‡≤¶‡≤≤‡≥ç‡≤≤‡≤ø ‡≤∏‡≤≤‡≤π‡≥Ü ‡≤ï‡≥á‡≤≥‡≤ø (Voice Output in Kannada)"):
    try:
        tts = gTTS(text=kannada_output, lang='kn')
        tts.save("output.mp3")
        with open("output.mp3", "rb") as audio_file:
            st.audio(audio_file.read(), format="audio/mp3")
    except Exception as e:
        st.error("Voice generation failed. Error: {}".format(e))
